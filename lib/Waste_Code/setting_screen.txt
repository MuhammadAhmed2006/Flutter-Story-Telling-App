import 'package:flutter/material.dart';
import 'package:flutter_application_1/Constants/color.dart';

class SettingsScreen extends StatefulWidget {
  const SettingsScreen({Key? key});

  @override
  _SettingsScreenState createState() => _SettingsScreenState();
}

class _SettingsScreenState extends State<SettingsScreen> {
  String _selectedLanguage = 'English'; // Initial selected language
  Color? _selectedPrimaryColor; // State to track selected primary color
  Color? _selectedSecondaryColor; // State to track selected secondary color
  String _selectedVoice = 'Voice 1'; // Initial selected voice

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: backgroundColor,
      appBar: AppBar(
        backgroundColor: backgroundColor,
        title: const Text("Settings"),
        centerTitle: true,
        leading: IconButton(
          icon: const Icon(
            Icons.arrow_back_ios_new_rounded,
            size: 18,
          ),
          onPressed: () {
            Navigator.pop(context);
          },
        ),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              SizedBox(
                width: double.infinity,
                child: Text(
                  "Change Language",
                  style: Theme.of(context).textTheme.bodyMedium,
                  textAlign: TextAlign.center,
                ),
              ),
              const SizedBox(height: 8),
              Container(
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.blue, width: 2.0),
                  borderRadius: BorderRadius.circular(12),
                ),
                padding: const EdgeInsets.symmetric(horizontal: 16.0),
                child: DropdownButtonFormField<String>(
                  value: _selectedLanguage,
                  onChanged: (String? newValue) {
                    if (newValue != null) {
                      setState(() {
                        _selectedLanguage = newValue;
                      });
                      // Implement logic to change language
                      // Example: AppLocalization.setLocale(context, newValue);
                    }
                  },
                  decoration: const InputDecoration(
                    border: InputBorder.none,
                  ),
                  items: <String>[
                    'English',
                    'Spanish',
                    'French',
                    'German',
                    'Chinese',
                    'Japanese',
                    'Russian',
                    'Arabic',
                    'Hindi',
                    // Add more languages as needed
                  ].map<DropdownMenuItem<String>>((String value) {
                    return DropdownMenuItem<String>(
                      value: value,
                      child: Text(
                        value,
                        style: const TextStyle(
                          fontSize: 16.0,
                          color: Colors.black,
                        ),
                      ),
                    );
                  }).toList(),
                  style: const TextStyle(
                    fontSize: 16.0,
                    color: Colors.black,
                  ),
                  icon: const Icon(Icons.arrow_drop_down, color: Colors.black),
                  dropdownColor:
                      Colors.white, // Background color of the dropdown
                  elevation: 8, // Shadow elevation of the dropdown
                ),
              ),
              const SizedBox(height: 16),
              SizedBox(
                width: double.infinity,
                child: Text(
                  "Change Voices",
                  style: Theme.of(context).textTheme.bodyMedium,
                  textAlign: TextAlign.center,
                ),
              ),
              const SizedBox(height: 8),
              Container(
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.blue, width: 2.0),
                  borderRadius: BorderRadius.circular(12),
                ),
                padding: const EdgeInsets.symmetric(horizontal: 16.0),
                child: DropdownButtonFormField<String>(
                  value: _selectedVoice,
                  onChanged: (String? newValue) {
                    if (newValue != null && !newValue.startsWith('Premium')) {
                      setState(() {
                        _selectedVoice = newValue;
                      });
                    } else if (newValue != null &&
                        newValue.startsWith('Premium')) {
                      print("Premium voices");
                    }
                  },
                  decoration: const InputDecoration(
                    border: InputBorder.none,
                  ),
                  items: <String>[
                    'Voice 1',
                    'Voice 2',
                    'Premium Voice 1',
                    'Premium Voice 2',
                    // Add more voices as needed
                  ].map<DropdownMenuItem<String>>((String value) {
                    bool isPremium = value.startsWith('Premium');
                    return DropdownMenuItem<String>(
                      value: value,
                      enabled: !isPremium,
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text(
                            value,
                            style: TextStyle(
                              fontSize: 16.0,
                              color: isPremium ? Colors.blue : Colors.black,
                            ),
                          ),
                          if (isPremium)
                            const Icon(Icons.star,
                                color: Colors.amber, size: 16),
                        ],
                      ),
                    );
                  }).toList(),
                  style: const TextStyle(
                    fontSize: 16.0,
                    color: Colors.black,
                  ),
                  icon: const Icon(Icons.arrow_drop_down, color: Colors.black),
                  dropdownColor:
                      Colors.white, // Background color of the dropdown
                  elevation: 8, // Shadow elevation of the dropdown
                ),
              ),
              const SizedBox(height: 16),
              SizedBox(
                width: double.infinity,
                child: Text(
                  "Change Theme",
                  style: Theme.of(context).textTheme.bodyMedium,
                  textAlign: TextAlign.center,
                ),
              ),
              const SizedBox(height: 12),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  _buildThemeOption(
                    "Primary",
                    [
                      Colors.blue,
                      Colors.red,
                      Colors.green,
                      Colors.yellow,
                      Colors.purple,
                      Colors.teal,
                      Colors.orange,
                      Colors.indigo,
                      Colors.pink,
                      Colors.deepPurple,
                      Colors.lightGreen,
                      Colors.deepOrange,
                    ],
                    context,
                    _selectedPrimaryColor,
                    (color) {
                      setState(() {
                        _selectedPrimaryColor = color;
                      });
                      // Handle theme selection logic here
                    },
                  ),
                  const SizedBox(width: 8),
                  _buildThemeOption(
                    "Secondary",
                    [
                      Colors.cyan,
                      Colors.amber,
                      Colors.lime,
                      Colors.brown,
                      Colors.grey,
                      Colors.blueGrey,
                      Colors.lightBlue,
                      Colors.lightBlueAccent,
                      Colors.deepOrangeAccent,
                      Colors.lightGreenAccent,
                      Colors.redAccent,
                      Colors.greenAccent,
                    ],
                    context,
                    _selectedSecondaryColor,
                    (color) {
                      setState(() {
                        _selectedSecondaryColor = color;
                      });
                      // Handle theme selection logic here
                    },
                  ),
                ],
              ),
              const SizedBox(height: 25),
              Center(
                child: ElevatedButton(
                  onPressed: () {
                    // Handle save button logic here
                  },
                  style: ElevatedButton.styleFrom(
                    foregroundColor: Colors.white,
                    backgroundColor: Colors.blue,
                    padding: const EdgeInsets.symmetric(
                        vertical: 16, horizontal: 24),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(24),
                    ),
                  ),
                  child: const Text('Save'),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildThemeOption(
    String themeName,
    List<Color> colors,
    BuildContext context,
    Color? selectedColor,
    Function(Color) onColorSelected,
  ) {
    return Expanded(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          Text(
            themeName,
            style: const TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 8),
          Wrap(
            spacing: 8.0,
            runSpacing: 8.0,
            children: colors
                .map(
                  (color) => GestureDetector(
                    onTap: () {
                      onColorSelected(color);
                    },
                    child: Container(
                      width: 30,
                      height: 30,
                      decoration: BoxDecoration(
                        color: color,
                        shape: BoxShape.circle,
                        border: Border.all(
                          color: selectedColor == color
                              ? Colors.black
                              : Colors.grey.shade400,
                          width: selectedColor == color ? 3.0 : 2.0,
                        ),
                      ),
                    ),
                  ),
                )
                .toList(),
          ),
        ],
      ),
    );
  }
}